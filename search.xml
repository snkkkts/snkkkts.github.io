<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>建站目的</title>
    <url>/posts/5048c436.html</url>
    <content><![CDATA[<h1 id="hello-world">Hello World</h1>
<p>你好，这里是snkkkts，你也可以叫我snk（雾</p>
<p>总之，这里是我的个人博客。在接下来的的几年里，我会在这里更新很多的内容，从数据结构与算法的学习笔记，到数学分析、线性代数等数学内容，再到经典好书的摘抄和读书心得，再到平时的随笔等等都会在这个博客上更新。</p>
<p>如果你也有一些想法想要分享，那么欢迎评论哦~</p>
]]></content>
  </entry>
  <entry>
    <title>基础数据结构：栈和队列</title>
    <url>/posts/7dce15fa.html</url>
    <content><![CDATA[<h1 id="栈队列和双端队列">栈、队列和双端队列</h1>
<h2 id="栈">1. 栈</h2>
<p> <strong>定义：</strong> <strong>堆栈</strong>（stack）又称为<strong>栈</strong>
或
<strong>堆叠</strong>，是计算机科学中的一种抽象资料类型，只允许在有序的线性资料集合的一端（称为堆栈顶端，top）进行加入数据（push）和移除数据（pop）的运算。因而按照后进先出（LIFO,
Last In First
Out）的原理运作，堆栈常用一维数组或链接串列来实现。常与另一种有序的线性资料集合队列相提并论。用户可以在任何时刻向栈中插入一个对象，但只能取得或者删除最后一个插入的对象（即栈顶）。下面是一个使用到堆栈的实例。</p>
<span id="more"></span>
<blockquote>
<p> <strong>例1-1：</strong> 文本编辑器通常提供一个“撤销“机制以取消最近的编辑操作并返回到先前的文本状态。这个撤销操作就是通过将文本的变化状态保存在一个栈中得以实现的。</p>
</blockquote>
<h3 id="栈的抽象数据类型">1.1 栈的抽象数据类型</h3>
<p> 栈是最简单也最重要的数据结构，它被广泛地应用到一系列不同的应用中，并在许多更加复杂地数据结构和算法中充当工具。从形式上来说，栈是支持以下两种操作的抽象数据类型（<strong>ADT</strong>），用<strong>S</strong>来表示这一<strong>ADT</strong>实例：</p>
<ul>
<li><strong>S.push(e):</strong> 将一个元素<strong>e</strong>添加到栈<strong>S</strong>的栈顶。</li>
<li><strong>S.pop(e):</strong> 从栈<strong>S</strong>中移除并返回栈顶的元素，如果此时栈是空的，这个操作将出错。此外，为了方便，我们定义了以下访问方法：</li>
<li><strong>S.top():</strong> 在不移除栈顶元素的情况下，返回一个栈<strong>S</strong>的栈顶元素；若栈为空，这个操作将出错。</li>
<li><strong>S.is_empty():</strong> 如果栈中不包含任何元素，则返回一个布尔值 <strong>“True”</strong></li>
<li><strong>len(S):</strong> 返回栈<strong>S</strong>中元素的数量；在<strong>Python</strong>中，我们用__len__这个特殊方法实现它。
按照惯例，我们假定一个新创建的栈是空的，并且其容量也没有预先的限制。添加进栈的元素可以是任何类型的。</li>
</ul>
<h3 id="简单的基于数组的栈实现">1.2 简单的基于数组的栈实现</h3>
<p> 我们可以简单地通过在<strong>Python</strong>列表中存储一些元素来实现一个栈。list类已支持append方法，用于添加一个元素到列表底部，并且支持pop方法，用于移除列表中最后的元素，所以我们可以很自然地将一个列表的尾部与一个栈的顶部相对应起来。这样我们就简单地实现了一个栈的模拟。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">st = [<span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 append() 向栈顶添加元素</span></span><br><span class="line">st.append(<span class="number">2</span>)</span><br><span class="line">st.append(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># &gt;&gt;&gt; st</span></span><br><span class="line"><span class="comment"># [5, 1, 4, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 pop 取出栈顶元素</span></span><br><span class="line">st.pop()</span><br><span class="line"><span class="comment"># &gt;&gt;&gt; st</span></span><br><span class="line"><span class="comment"># [5, 1, 4, 2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 clear 清空栈</span></span><br><span class="line">st.clear()</span><br></pre></td></tr></table></figure>
<p>虽然程序员可以直接用一个list类代替一个正式的stack类，但是列表还包括一些不符合这种抽象数据类型的方法（比如：增加或者移除处于列表任何位置的元素）。同时，list类所使用的术语也不能与栈这种抽象数据类型的传统命名方法精确对应，特别是append方法和push方法之间的区别。相反，我们将强调如何使用一个列表实现栈元素的内部存储，并同时提供一个符合堆栈的公共接口。</p>
<table>
<thead>
<tr class="header">
<th>栈方法</th>
<th>用Python列表实现</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>S.push(e)</td>
<td>L.append(e)</td>
</tr>
<tr class="even">
<td>S.pop()</td>
<td>L.pop()</td>
</tr>
<tr class="odd">
<td>S.top()</td>
<td>L[-1]</td>
</tr>
<tr class="even">
<td>S.is_empty()</td>
<td>len(L) == 0</td>
</tr>
<tr class="odd">
<td>len(S)</td>
<td>len(L)</td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>用Python列表作为存储实现一个栈</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ArrayStack</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.data = []</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.data)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.data) == <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">push</span>(<span class="params">self,e</span>):</span><br><span class="line">        self.data.append(e)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">top</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> Empty(<span class="string">&#x27;Stack is empty&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> self.data[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.is_empty():</span><br><span class="line">             <span class="keyword">raise</span> Empty(<span class="string">&#x27;Stack is empty&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> self.data.pop()</span><br></pre></td></tr></table></figure>
<h3 id="基于栈的一些应用">1.3 基于栈的一些应用</h3>
<blockquote>
<p>例1-2 LeetCode 20. 有效的括号（easy）</p>
</blockquote>
<p>给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串 s
，判断字符串是否有效。</p>
<p>有效字符串需满足：</p>
<ol type="1">
<li>左括号必须用相同类型的右括号闭合。</li>
<li>左括号必须以正确的顺序闭合。</li>
<li>每个右括号都有一个对应的相同类型的左括号。</li>
</ol>
<p><strong>示例 1：</strong></p>
<blockquote>
<p><strong>输入</strong>：s = "()"</p>
<p><strong>输出</strong>：true</p>
</blockquote>
<p><strong>示例 2：</strong></p>
<blockquote>
<p><strong>输入：</strong>s = "()<span></span>"</p>
<p><strong>输出：</strong>true</p>
</blockquote>
<p>示例 3：</p>
<blockquote>
<p><strong>输入：</strong>s = "(]"</p>
<p><strong>输出：</strong>false</p>
</blockquote>
<p><strong>思路一：</strong></p>
<p>自左到右，我们可以逐一判断该字符串内的每个括号，如果是左括号，那么我们就将它压入一个栈中，如果是右括号，那么我们就判断这个右括号和栈顶的左括号是否匹配，如果是，就弹出栈顶括号，如果不是，就返回false。</p>
<p>记住，我们的栈是一个只储存左括号的栈，原因是右括号如果入栈，那么它将再也弹不出去</p>
<p>最后，如果这个字符串是有效的，那么我们就得到了一个空栈，反之则无效。</p>
<p>  <strong>代码实现：</strong> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isValid</span>(<span class="params">self, s</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        match_dic = &#123;<span class="string">&#x27;)&#x27;</span>:<span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;]&#x27;</span>:<span class="string">&#x27;[&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>:<span class="string">&#x27;&#123;&#x27;</span>&#125;</span><br><span class="line">        temp_list = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> ch <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">if</span> ch <span class="keyword">in</span> <span class="string">&#x27;([&#123;&#x27;</span>:</span><br><span class="line">                temp_list.append(ch)</span><br><span class="line">            <span class="keyword">elif</span> ch <span class="keyword">in</span> <span class="string">&#x27;)]&#125;&#x27;</span>:</span><br><span class="line">                <span class="comment"># 右括号比左括号先出现, 不能闭合</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> temp_list:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># 遇到右括号, 必然要与上一个左括号闭合, 如果不匹配就 False</span></span><br><span class="line">                <span class="keyword">if</span> match_dic[ch] == temp_list[-<span class="number">1</span>]:</span><br><span class="line">                    temp_list.pop(-<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="comment"># 正常闭合的情况下, 栈里面应该全都弹出去了, 所以应该是空的</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> temp_list:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure></p>
<p><strong>思路二：</strong></p>
<p>如果一个字符串是有效的括号，那么它就会在中间出现一个'[]' 或 '{}' 或
'()'结构，当我们删去这些结构后，余下的仍然是一个有效括号。因此，我们可以对一个有效的括号不断进行该操作，直到字符串变空。</p>
<p>  <strong>代码实现：</strong> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isValid</span>(<span class="params">self, s</span>):</span><br><span class="line">        <span class="keyword">while</span> <span class="string">&#x27;&#123;&#125;&#x27;</span> <span class="keyword">in</span> s <span class="keyword">or</span> <span class="string">&#x27;()&#x27;</span> <span class="keyword">in</span> s <span class="keyword">or</span> <span class="string">&#x27;[]&#x27;</span> <span class="keyword">in</span> s:</span><br><span class="line">            s = s.replace(<span class="string">&#x27;&#123;&#125;&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            s = s.replace(<span class="string">&#x27;[]&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            s = s.replace(<span class="string">&#x27;()&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> s == <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>例1-3 LeetCode 402. 移掉K位数字（medium）</p>
</blockquote>
<p>给你一个以字符串表示的非负整数 num 和一个整数 k ，移除这个数中的 k
位数字，使得剩下的数字最小。请你以字符串形式返回这个最小的数字。</p>
<p><strong>示例 1 ：</strong></p>
<blockquote>
<p><strong>输入：</strong> num = "1432219", k = 3</p>
<p><strong>输出：</strong>"1219"</p>
<p><strong>解释：</strong> 移除掉三个数字 4, 3, 和 2
形成一个新的最小的数字 1219 。</p>
</blockquote>
<p><strong>示例 2 ：</strong></p>
<blockquote>
<p><strong>输入：</strong> num = "10200", k = 1</p>
<p><strong>输出：</strong>"200"</p>
<p><strong>解释：</strong> 移掉首位的 1 剩下的数字为 200.
注意输出不能有任何前导零。</p>
</blockquote>
<p><strong>示例 3 ：</strong></p>
<blockquote>
<p><strong>输入：</strong> num = "10", k = 2</p>
<p><strong>输出：</strong>"0"</p>
<p><strong>解释：</strong> 从原数字移除所有的数字，剩余为空就是 0 。</p>
</blockquote>
<p><strong>思路：</strong>
我们知道，对于两个数1234a6和1234b6，如果a大于b，那么前者就大于后者，反之则小于。也就是说，在两个位数相同的数中，相同位第一个不同的数字大小决定了两个数的大小，那么我们就可以有如下想法：维护单调递增栈。</p>
<p>具体实现过程如下：</p>
<p>我们从头扫字符串的每位数字，如果一个数字比栈顶的数字大，那么它就应该入栈，反之，则弹出栈顶数字，再压入该数。弹出k次后停止，此时即为所求。如果没有经过k次就停止了，我们取前n-k位作为我们的答案，因为我们得到了单调递增栈，后面的数不会比前面的更小。</p>
<p>  <strong>代码实现：</strong> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">removeKdigits</span>(<span class="params">self, num: <span class="built_in">str</span>, k: <span class="built_in">int</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        stk = []</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> num:</span><br><span class="line">            <span class="keyword">while</span> stk <span class="keyword">and</span> c &lt; stk[-<span class="number">1</span>] <span class="keyword">and</span> k:</span><br><span class="line">                stk.pop()</span><br><span class="line">                k -= <span class="number">1</span></span><br><span class="line">            stk.append(c)</span><br><span class="line">        res = <span class="string">&#x27;&#x27;</span>.join(stk)[:<span class="built_in">len</span>(stk) - k].lstrip(<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> res <span class="keyword">if</span> res <span class="keyword">else</span> <span class="string">&#x27;0&#x27;</span></span><br><span class="line"><span class="comment"># 注：字符串的.lstrip方法可以用来去除字符串左侧的指定字符和特定序列。</span></span><br><span class="line"><span class="comment"># 与之类似的，rstrip方法可以去除右侧的，strip方法可以去除两侧的。</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>栈</tag>
        <tag>队列</tag>
      </tags>
  </entry>
</search>

<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>snkの学习分享</title>
    <link>http://snkkkts.icu/</link>
    
    <atom:link href="http://snkkkts.icu/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>循此苦旅，直抵群星</description>
    <pubDate>Sun, 24 Dec 2023 09:47:37 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>基础数据结构：栈和队列</title>
      <link>http://snkkkts.icu/posts/7dce15fa.html</link>
      <guid>http://snkkkts.icu/posts/7dce15fa.html</guid>
      <pubDate>Sun, 24 Dec 2023 08:15:43 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;栈队列和双端队列&quot;&gt;栈、队列和双端队列&lt;/h1&gt;
&lt;h2 id=&quot;栈&quot;&gt;1. 栈&lt;/h2&gt;
&lt;p&gt; &lt;strong&gt;定义：&lt;/strong&gt; &lt;strong&gt;堆栈&lt;/strong&gt;（stack）又称为&lt;strong&gt;栈&lt;/strong&gt;
或
&lt;strong&gt;堆叠&lt;/strong&gt;，是计算机科学中的一种抽象资料类型，只允许在有序的线性资料集合的一端（称为堆栈顶端，top）进行加入数据（push）和移除数据（pop）的运算。因而按照后进先出（LIFO,
Last In First
Out）的原理运作，堆栈常用一维数组或链接串列来实现。常与另一种有序的线性资料集合队列相提并论。用户可以在任何时刻向栈中插入一个对象，但只能取得或者删除最后一个插入的对象（即栈顶）。下面是一个使用到堆栈的实例。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="栈队列和双端队列">栈、队列和双端队列</h1><h2 id="栈">1. 栈</h2><p> <strong>定义：</strong> <strong>堆栈</strong>（stack）又称为<strong>栈</strong>或<strong>堆叠</strong>，是计算机科学中的一种抽象资料类型，只允许在有序的线性资料集合的一端（称为堆栈顶端，top）进行加入数据（push）和移除数据（pop）的运算。因而按照后进先出（LIFO,Last In FirstOut）的原理运作，堆栈常用一维数组或链接串列来实现。常与另一种有序的线性资料集合队列相提并论。用户可以在任何时刻向栈中插入一个对象，但只能取得或者删除最后一个插入的对象（即栈顶）。下面是一个使用到堆栈的实例。</p><span id="more"></span><blockquote><p> <strong>例1-1：</strong> 文本编辑器通常提供一个“撤销“机制以取消最近的编辑操作并返回到先前的文本状态。这个撤销操作就是通过将文本的变化状态保存在一个栈中得以实现的。</p></blockquote><h3 id="栈的抽象数据类型">1.1 栈的抽象数据类型</h3><p> 栈是最简单也最重要的数据结构，它被广泛地应用到一系列不同的应用中，并在许多更加复杂地数据结构和算法中充当工具。从形式上来说，栈是支持以下两种操作的抽象数据类型（<strong>ADT</strong>），用<strong>S</strong>来表示这一<strong>ADT</strong>实例：</p><ul><li><strong>S.push(e):</strong> 将一个元素<strong>e</strong>添加到栈<strong>S</strong>的栈顶。</li><li><strong>S.pop(e):</strong> 从栈<strong>S</strong>中移除并返回栈顶的元素，如果此时栈是空的，这个操作将出错。此外，为了方便，我们定义了以下访问方法：</li><li><strong>S.top():</strong> 在不移除栈顶元素的情况下，返回一个栈<strong>S</strong>的栈顶元素；若栈为空，这个操作将出错。</li><li><strong>S.is_empty():</strong> 如果栈中不包含任何元素，则返回一个布尔值 <strong>“True”</strong></li><li><strong>len(S):</strong> 返回栈<strong>S</strong>中元素的数量；在<strong>Python</strong>中，我们用__len__这个特殊方法实现它。按照惯例，我们假定一个新创建的栈是空的，并且其容量也没有预先的限制。添加进栈的元素可以是任何类型的。</li></ul><h3 id="简单的基于数组的栈实现">1.2 简单的基于数组的栈实现</h3><p> 我们可以简单地通过在<strong>Python</strong>列表中存储一些元素来实现一个栈。list类已支持append方法，用于添加一个元素到列表底部，并且支持pop方法，用于移除列表中最后的元素，所以我们可以很自然地将一个列表的尾部与一个栈的顶部相对应起来。这样我们就简单地实现了一个栈的模拟。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">st = [<span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 append() 向栈顶添加元素</span></span><br><span class="line">st.append(<span class="number">2</span>)</span><br><span class="line">st.append(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># &gt;&gt;&gt; st</span></span><br><span class="line"><span class="comment"># [5, 1, 4, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 pop 取出栈顶元素</span></span><br><span class="line">st.pop()</span><br><span class="line"><span class="comment"># &gt;&gt;&gt; st</span></span><br><span class="line"><span class="comment"># [5, 1, 4, 2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 clear 清空栈</span></span><br><span class="line">st.clear()</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://snkkkts.icu/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/">数据结构</category>
      
      
      <category domain="http://snkkkts.icu/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/">数据结构</category>
      
      <category domain="http://snkkkts.icu/tags/%E6%A0%88/">栈</category>
      
      <category domain="http://snkkkts.icu/tags/%E9%98%9F%E5%88%97/">队列</category>
      
      
      <comments>http://snkkkts.icu/posts/7dce15fa.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>建站目的</title>
      <link>http://snkkkts.icu/posts/5048c436.html</link>
      <guid>http://snkkkts.icu/posts/5048c436.html</guid>
      <pubDate>Fri, 22 Dec 2023 08:06:23 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;hello-world&quot;&gt;Hello World&lt;/h1&gt;
&lt;p&gt;你好，这里是snkkkts，你也可以叫我snk（雾&lt;/p&gt;
&lt;p&gt;总之，这里是我的个人博客。在接下来的的几年里，我会在这里更新很多的内容，从数据结构与算法的学习笔记，到数学分析、线性代数等数学内</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="hello-world">Hello World</h1><p>你好，这里是snkkkts，你也可以叫我snk（雾</p><p>总之，这里是我的个人博客。在接下来的的几年里，我会在这里更新很多的内容，从数据结构与算法的学习笔记，到数学分析、线性代数等数学内容，再到经典好书的摘抄和读书心得，再到平时的随笔等等都会在这个博客上更新。</p><p>如果你也有一些想法想要分享，那么欢迎评论哦~</p>]]></content:encoded>
      
      
      
      
      <comments>http://snkkkts.icu/posts/5048c436.html#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
